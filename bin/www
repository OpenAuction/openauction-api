#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../index');
const http = require('http');
const https = require('https');
const fs = require('fs');

const isProd = process.env.NODE_ENV === 'production';

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portInt = parseInt(val, 10);

  if (isNaN(portInt)) {
    // named pipe
    return val;
  }

  if (portInt >= 0) {
    // portInt number
    return portInt;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = isProd
  ? http.createServer(app)
  : https.createServer(
      {
        key: fs.readFileSync(`./ssl/server.key`),
        cert: fs.readFileSync(`./ssl/server.crt`),
      },
      app
    );

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe  ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
const network = '0.0.0.0';

server.listen(port, network);
server.on('error', onError);
server.on('listening', onListening);

module.exports = server;
